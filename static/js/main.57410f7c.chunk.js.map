{"version":3,"sources":["components/useStickyState.jsx","components/formInput.jsx","components/todoitem.jsx","App.js","serviceWorker.js","index.js"],"names":["UseStickyState","defaultValue","storageName","React","useState","stickyValue","window","localStorage","undefined","JSON","parse","state","setState","useEffect","setItem","stringify","FormButton","handleClick","className","id","type","value","onClick","TodoItem","map","item","index","key","e","target","classList","toggle","splice","location","reload","document","getElementById","insertAdjacentHTML","onclick","preventDefault","form","remove","App","previousElementSibling","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAgBiBA,MAbjB,SAAwBC,EAAcC,GAAc,IAAD,EAEvBC,IAAMC,UAAS,WACvC,IAAIC,EAAcC,OAAOC,aAAaL,YACtC,YAAuBM,IAAhBH,EAA4B,GAAKI,KAAKC,MAAML,MAJJ,mBAE1CM,EAF0C,KAEnCC,EAFmC,KAU/C,OAHFT,IAAMU,WAAU,kBAAMP,OAAOC,aAAaO,QAAQ,cAAcL,KAAKM,UAAUJ,OAGtE,CAACA,EAAOC,ICUJI,EArBI,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAF,OACjB,6BACE,yBAAKC,UAAU,gCACb,4CAEF,yBAAKA,UAAU,+CACb,8BACE,6DAGA,2BACEC,GAAK,QACLD,UAAU,uCACVE,KAAK,SAEP,2BAAOA,KAAK,SAASC,MAAM,QAAQC,QAAWL,QC0CvCM,EAxDE,SAAC,GAAD,IAAEZ,EAAF,EAAEA,MAAOC,EAAT,EAASA,SAAT,OACb,yBAAKM,UAAU,uBACVP,EAAMa,KAAI,SAACC,EAAMC,GAAP,OACT,yBACER,UAAU,2DACVS,IAAKD,GAEL,0BAAMJ,QAAS,SAACM,GAAD,OAAOA,EAAEC,OAAOC,UAAUC,OAAO,mBAC7CN,GAGH,0BACEA,KAAMA,EACNC,MAAOA,EACPR,UAAU,wBACVI,QAAS,SAACM,GACRjB,EAAMqB,OAAON,EAAO,GACpBpB,OAAOC,aAAaL,YAAcO,KAAKM,UAAUJ,GACjDC,EAASD,GACTL,OAAO2B,SAASC,WARpB,QAaA,0BACET,KAAMA,EACNC,MAAOA,EACPR,UAAU,0CACVI,QAAS,SAACM,GACR,GAAIO,SAASC,eAAe,cAC1B,OAAO,EAETR,EAAEC,OAAOQ,mBACP,WADF,uMAOAF,SAASC,eAAe,cAAcE,QAAU,SAAUV,GACxDA,EAAEW,iBACF5B,EAAMqB,OAAON,EAAO,EAAGE,EAAEC,OAAOW,KAAK,GAAGnB,OACxCf,OAAOC,aAAaL,YAAcO,KAAKM,UAAUJ,GACjDC,EAASD,GACTwB,SAASC,eAAe,cAAcK,SACtCnC,OAAO2B,SAASC,YArBtB,gBCHGQ,MAlBf,WAAgB,IAAD,EACa1C,EAAe,GAAI,eADhC,mBACNW,EADM,KACCC,EADD,KAWb,OACE,yBAAKM,UAAU,OACf,kBAAC,EAAD,CAAYD,YAVd,SAAqBW,GACnBA,EAAEW,iBACEX,EAAEC,OAAOc,uBAAuBtB,QAClCT,EAAS,GAAD,mBAAKD,GAAL,CAAYiB,EAAEC,OAAOc,uBAAuBtB,SAClDO,EAAEC,OAAOc,uBAAuBtB,MAAQ,OAO5C,kBAAC,EAAD,CAAUV,MAASA,EAAOC,SAAYA,MCRtBgC,QACW,cAA7BtC,OAAO2B,SAASY,UAEe,UAA7BvC,OAAO2B,SAASY,UAEhBvC,OAAO2B,SAASY,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASC,eAAe,SDyHpB,kBAAmBc,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.57410f7c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nfunction UseStickyState(defaultValue, storageName) {\r\n\r\n  const [state, setState] = React.useState(() => {\r\n    let stickyValue = window.localStorage.storageName;\r\n    return stickyValue === undefined ? [] : JSON.parse(stickyValue);\r\n  });\r\n\r\n  React.useEffect(() => window.localStorage.setItem(\"storageName\",JSON.stringify(state)))\r\n \r\n\r\n    return [state, setState];\r\n  }\r\n\r\n  export default UseStickyState;","import React from \"react\";\r\n\r\nconst FormButton = ({handleClick}) => (\r\n  <div>\r\n    <div className=\"w3-panel w3-yellow w3-center\">\r\n      <h1>My ToDo App</h1>\r\n    </div>\r\n    <div className=\"w3-container w3-margin-bottom w3-light-gray\" >\r\n      <form>\r\n        <label>\r\n          What would you like to do?\r\n        </label>\r\n        <input\r\n          id = \"input\"\r\n          className=\"inputBox w3-input w3-border w3-round\"\r\n          type=\"text\"\r\n        />\r\n        <input type=\"submit\" value=\"Enter\" onClick = {handleClick} />\r\n      </form>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default FormButton;\r\n","import React from \"react\";\r\n\r\n\r\nconst TodoItem = ({state, setState }) => (\r\n    <div className=\"w3-container cursor\">\r\n        {state.map((item, index) => (\r\n          <div\r\n            className=\"w3-card-4 w3-yellow w3-padding w3-margin-bottom todoList\"\r\n            key={index}\r\n          >\r\n            <span onClick={(e) => e.target.classList.toggle(\"strikethrough\")}>\r\n              {item}\r\n            </span>\r\n\r\n            <span\r\n              item={item}\r\n              index={index}\r\n              className=\"w3-right deleteButton\"\r\n              onClick={(e) => {\r\n                state.splice(index, 1);\r\n                window.localStorage.storageName = JSON.stringify(state);\r\n                setState(state);\r\n                window.location.reload();\r\n              }}\r\n            >\r\n              &times;\r\n            </span>\r\n            <span\r\n              item={item}\r\n              index={index}\r\n              className=\"w3-right w3-margin-right w3-margin-left\"\r\n              onClick={(e) => {\r\n                if (document.getElementById(\"updateForm\")) {\r\n                  return false;\r\n                }\r\n                e.target.insertAdjacentHTML(\r\n                  \"afterend\",\r\n                  `<form id=\"updateForm\">\r\n                    <input type=\"text\" onclick = \"event.stopPropagation()\" />\r\n                    <input type=\"submit\" value = \"Update ToDo\" />\r\n                  </form>`\r\n                );\r\n                document.getElementById(\"updateForm\").onclick = function (e) {\r\n                  e.preventDefault();\r\n                  state.splice(index, 1, e.target.form[0].value);\r\n                  window.localStorage.storageName = JSON.stringify(state);\r\n                  setState(state);\r\n                  document.getElementById(\"updateForm\").remove();\r\n                  window.location.reload();\r\n                };\r\n              }}\r\n            >\r\n              &#10531;\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n)\r\n\r\nexport default TodoItem;","import React from \"react\";\nimport \"./w3.css\";\nimport UseStickyState from \"../src/components/useStickyState.jsx\";\nimport FormButton from \"./components/formInput\";\nimport TodoItem from \"./components/todoitem\";\n\nfunction App() {\n  const [state, setState] = UseStickyState([], \"storageName\");\n\n  function handleClick(e) {\n    e.preventDefault();\n    if (e.target.previousElementSibling.value) {\n      setState([...state, e.target.previousElementSibling.value])\n        e.target.previousElementSibling.value = \"\";\n    }\n  }\n\n  return (\n    <div className=\"App\">\n    <FormButton handleClick = {handleClick} />\n    <TodoItem state = {state} setState = {setState} />\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}